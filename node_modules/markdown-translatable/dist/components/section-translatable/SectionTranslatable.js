"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _reactMarkdown = _interopRequireDefault(require("react-markdown"));

var _md = _interopRequireDefault(require("md5"));

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _blockTranslatable = _interopRequireDefault(require("../block-translatable"));

var helpers = _interopRequireWildcard(require("./helpers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// const whyDidYouRender = (process.env.NODE_ENV !== 'production') ?
//   require('@welldone-software/why-did-you-render') : undefined;
// if (whyDidYouRender) whyDidYouRender(React);

/**
 * ### A reusable component for translating Markdown in sections.
 * @component
 */
function SectionTranslatable(_ref) {
  var classes = _ref.classes,
      original = _ref.original,
      translation = _ref.translation,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      onTranslation = _ref.onTranslation,
      onSectionFocus = _ref.onSectionFocus,
      sectionFocus = _ref.sectionFocus,
      style = _ref.style;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      raw = _useState2[0],
      setRaw = _useState2[1];

  var _useState3 = (0, _react.useState)(sectionFocus),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var originalBlocks = helpers.blocksFromMarkdown({
    markdown: original
  });

  var __translationBlocks = helpers.blocksFromMarkdown({
    markdown: translation
  });

  var _useState5 = (0, _react.useState)(__translationBlocks),
      _useState6 = _slicedToArray(_useState5, 2),
      translationBlocks = _useState6[0],
      setTranslationBlocks = _useState6[1];

  var _useState7 = (0, _react.useState)(),
      _useState8 = _slicedToArray(_useState7, 2),
      editedTranslation = _useState8[0],
      setEditedTranslation = _useState8[1];

  var saveEditedTranslation = function saveEditedTranslation() {
    return onTranslation(editedTranslation);
  };

  var toggleRaw = function toggleRaw() {
    return setRaw(!raw);
  };

  if (onSectionFocus && sectionFocus !== expanded) setExpanded(sectionFocus);

  var expandedToggle = function expandedToggle() {
    var _expanded = !expanded;

    if (onSectionFocus) onSectionFocus(_expanded);
    setExpanded(_expanded);
  };

  var setTranslationBlock = function setTranslationBlock(_ref2) {
    var index = _ref2.index,
        translationBlock = _ref2.translationBlock;

    var _translationBlocks = _toConsumableArray(translationBlocks);

    _translationBlocks[index] = translationBlock;
    setTranslationBlocks(_translationBlocks);

    var _translation = helpers.markdownFromBlocks({
      blocks: _translationBlocks
    });

    setEditedTranslation(_translation);
  };

  var blockTranslatables = originalBlocks.map(function (originalBlock, index) {
    var key = index + (0, _md.default)(JSON.stringify(originalBlock));

    var _onTranslation = function _onTranslation(translationBlock) {
      return setTranslationBlock({
        index: index,
        translationBlock: translationBlock
      });
    };

    var translationBlock = translationBlocks[index];
    return _react.default.createElement(_blockTranslatable.default, {
      key: key,
      original: originalBlock,
      translation: translationBlock,
      inputFilters: inputFilters,
      outputFilters: outputFilters,
      onTranslation: _onTranslation,
      raw: raw
    });
  });
  var titleBlock = originalBlocks[0];
  var summaryTitle = expanded ? _react.default.createElement(_react.default.Fragment, null) : _react.default.createElement(_reactMarkdown.default, {
    source: titleBlock,
    escapeHtml: false
  });
  var changed = editedTranslation && translation !== editedTranslation;
  var saveIcon = changed ? _react.default.createElement(_icons.Save, null) : _react.default.createElement(_icons.SaveOutlined, null);
  var rawIcon = raw ? _react.default.createElement(_icons.Pageview, null) : _react.default.createElement(_icons.PageviewOutlined, null);
  return _react.default.createElement(_core.ExpansionPanel, {
    style: style,
    className: classes.root,
    expanded: expanded
  }, _react.default.createElement(_core.ExpansionPanelSummary, {
    expandIcon: _react.default.createElement(_icons.ExpandMore, null) // classes={{content: 'summaryContent'}}
    ,
    className: classes.content,
    onClick: expandedToggle,
    children: summaryTitle
  }), _react.default.createElement(_core.ExpansionPanelDetails, {
    className: classes.details
  }, blockTranslatables), _react.default.createElement(_core.ExpansionPanelActions, {
    className: classes.actions
  }, _react.default.createElement(_core.IconButton, {
    onClick: toggleRaw
  }, rawIcon), _react.default.createElement(_core.IconButton, {
    disabled: !changed,
    onClick: saveEditedTranslation
  }, saveIcon), _react.default.createElement(_core.IconButton, {
    onClick: expandedToggle
  }, _react.default.createElement(_icons.ExpandLess, null))));
}

;
SectionTranslatable.propTypes = {
  /** Original markdown for the editor. */
  original: _propTypes.default.string.isRequired,

  /** Translation markdown for the editor. */
  translation: _propTypes.default.string.isRequired,

  /** Function to propogate changes to the translation. */
  onTranslation: _propTypes.default.func.isRequired,

  /** Function to propogate changes to the Section in focus. */
  onSectionFocus: _propTypes.default.func,

  /** Set the Section in focus. */
  sectionFocus: _propTypes.default.bool,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object
};
SectionTranslatable.defaultProps = {
  original: '',
  translation: '',
  inputFilters: [],
  outputFilters: [],
  sectionFocus: false,
  style: {}
};

var styles = function styles(theme) {
  return {
    root: {},
    details: {
      display: 'block',
      padding: '0',
      borderTop: '1px solid #ccc',
      borderBottom: '1px solid #ccc'
    },
    actions: {
      padding: '8px'
    }
  };
};

var areEqual = function areEqual(prevProps, nextProps) {
  var keys = ['original', 'translation', 'sectionFocus', 'style'];
  var checks = keys.map(function (key) {
    return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);
  });
  var equal = !checks.includes(false); // console.log('SectionTranslatable', keys, checks, equal);

  return equal;
}; // SectionTranslatable.whyDidYouRender = true;


var StyleComponent = (0, _styles.withStyles)(styles)(SectionTranslatable);

var MemoComponent = _react.default.memo(StyleComponent, areEqual);

var _default = MemoComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,