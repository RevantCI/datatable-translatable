"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var helpers = _interopRequireWildcard(require("./helpers"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const whyDidYouRender = (process.env.NODE_ENV !== 'production') ?
//   require('@welldone-software/why-did-you-render') : undefined;
// if (whyDidYouRender) whyDidYouRender(React);

/**
 * ### A reusable component for translating a Markdown block as HTML.
 * @component
 */
function BlockEditable(_ref) {
  var classes = _ref.classes,
      markdown = _ref.markdown,
      onEdit = _ref.onEdit,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      style = _ref.style,
      raw = _ref.raw,
      editable = _ref.editable;
  var component;

  var handleBlur = function handleBlur(_markdown) {
    var oldHTML = helpers.markdownToHtml({
      markdown: markdown,
      inputFilters: inputFilters
    });
    var newHTML = helpers.markdownToHtml({
      markdown: _markdown,
      inputFilters: inputFilters
    });
    if (oldHTML !== newHTML) onEdit(_markdown);
  };

  var handleHTMLBlur = function handleHTMLBlur(e) {
    var html = e.target.innerHTML;

    var _markdown = helpers.htmlToMarkdown({
      html: html,
      outputFilters: outputFilters
    });

    handleBlur(_markdown);
  };

  var handleRawBlur = function handleRawBlur(e) {
    var _markdown = helpers.filter({
      string: e.target.innerText,
      filters: outputFilters
    });

    handleBlur(_markdown);
  };

  if (raw) {
    var dangerouslySetInnerHTML = {
      __html: markdown
    };
    component = _react.default.createElement("div", {
      className: classes.markdown
    }, _react.default.createElement("pre", {
      className: classes.pre,
      dir: "auto",
      contentEditable: editable,
      onBlur: handleRawBlur,
      dangerouslySetInnerHTML: dangerouslySetInnerHTML
    }));
  } else {
    var _dangerouslySetInnerHTML = {
      __html: helpers.markdownToHtml({
        markdown: markdown,
        inputFilters: inputFilters
      })
    };
    component = _react.default.createElement("div", {
      className: classes.html,
      dir: "auto",
      contentEditable: editable,
      dangerouslySetInnerHTML: _dangerouslySetInnerHTML,
      onBlur: handleHTMLBlur
    });
  }

  return _react.default.createElement("div", {
    className: classes.root,
    style: style
  }, _react.default.createElement("div", {
    className: classes.wrapper
  }, component));
}

;
BlockEditable.propTypes = {
  /** @ignore */
  classes: _propTypes.default.object.isRequired,

  /** Initial markdown for the editor. */
  markdown: _propTypes.default.string.isRequired,

  /** Function to propogate changes to the markdown. */
  onEdit: _propTypes.default.func.isRequired,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object,

  /** Display Raw Markdown or HTML. */
  raw: _propTypes.default.bool,

  /** Enable/Disable editability. */
  editable: _propTypes.default.bool
};
BlockEditable.defaultProps = {
  markdown: '',
  onEdit: function onEdit() {},
  inputFilters: [],
  outputFilters: [],
  style: {},
  raw: false,
  editable: true
};

var styles = function styles(theme) {
  return {
    root: {
      height: '100%',
      width: '100%'
    },
    wrapper: {
      height: '100%',
      padding: '0 0.5em'
    },
    html: {
      height: '100%',
      width: '100%',
      display: 'grid'
    },
    markdown: {
      height: '100%',
      width: '100%',
      fontSize: '1.1em',
      display: 'grid'
    },
    pre: {
      whiteSpace: 'pre-wrap'
    }
  };
};

var areEqual = function areEqual(prevProps, nextProps) {
  var keys = ['markdown', 'raw', 'editable', 'style'];
  var checks = keys.map(function (key) {
    return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);
  });
  var equal = !checks.includes(false); // console.log('BlockEditable', keys, checks, equal);

  return equal;
}; // BlockEditable.whyDidYouRender = true;


var StyleComponent = (0, _styles.withStyles)(styles)(BlockEditable);

var MemoComponent = _react.default.memo(StyleComponent, areEqual);

var _default = MemoComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2Jsb2NrLWVkaXRhYmxlL0Jsb2NrRWRpdGFibGUuanMiXSwibmFtZXMiOlsiQmxvY2tFZGl0YWJsZSIsImNsYXNzZXMiLCJtYXJrZG93biIsIm9uRWRpdCIsImlucHV0RmlsdGVycyIsIm91dHB1dEZpbHRlcnMiLCJzdHlsZSIsInJhdyIsImVkaXRhYmxlIiwiY29tcG9uZW50IiwiaGFuZGxlQmx1ciIsIl9tYXJrZG93biIsIm9sZEhUTUwiLCJoZWxwZXJzIiwibWFya2Rvd25Ub0h0bWwiLCJuZXdIVE1MIiwiaGFuZGxlSFRNTEJsdXIiLCJlIiwiaHRtbCIsInRhcmdldCIsImlubmVySFRNTCIsImh0bWxUb01hcmtkb3duIiwiaGFuZGxlUmF3Qmx1ciIsImZpbHRlciIsInN0cmluZyIsImlubmVyVGV4dCIsImZpbHRlcnMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsInByZSIsInJvb3QiLCJ3cmFwcGVyIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJhcnJheSIsImJvb2wiLCJkZWZhdWx0UHJvcHMiLCJzdHlsZXMiLCJ0aGVtZSIsImhlaWdodCIsIndpZHRoIiwicGFkZGluZyIsImRpc3BsYXkiLCJmb250U2l6ZSIsIndoaXRlU3BhY2UiLCJhcmVFcXVhbCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsImtleXMiLCJjaGVja3MiLCJtYXAiLCJrZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZXF1YWwiLCJpbmNsdWRlcyIsIlN0eWxlQ29tcG9uZW50IiwiTWVtb0NvbXBvbmVudCIsIlJlYWN0IiwibWVtbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7Ozs7QUFJQSxTQUFTQSxhQUFULE9BU0c7QUFBQSxNQVJEQyxPQVFDLFFBUkRBLE9BUUM7QUFBQSxNQVBEQyxR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ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XG5cbi8vIGNvbnN0IHdoeURpZFlvdVJlbmRlciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/XG4vLyAgIHJlcXVpcmUoJ0B3ZWxsZG9uZS1zb2Z0d2FyZS93aHktZGlkLXlvdS1yZW5kZXInKSA6IHVuZGVmaW5lZDtcbi8vIGlmICh3aHlEaWRZb3VSZW5kZXIpIHdoeURpZFlvdVJlbmRlcihSZWFjdCk7XG4vKipcbiAqICMjIyBBIHJldXNhYmxlIGNvbXBvbmVudCBmb3IgdHJhbnNsYXRpbmcgYSBNYXJrZG93biBibG9jayBhcyBIVE1MLlxuICogQGNvbXBvbmVudFxuICovXG5mdW5jdGlvbiBCbG9ja0VkaXRhYmxlKHtcbiAgY2xhc3NlcyxcbiAgbWFya2Rvd24sXG4gIG9uRWRpdCxcbiAgaW5wdXRGaWx0ZXJzLFxuICBvdXRwdXRGaWx0ZXJzLFxuICBzdHlsZSxcbiAgcmF3LFxuICBlZGl0YWJsZSxcbn0pIHtcbiAgbGV0IGNvbXBvbmVudDtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gKF9tYXJrZG93bikgPT4ge1xuICAgIGNvbnN0IG9sZEhUTUwgPSBoZWxwZXJzLm1hcmtkb3duVG9IdG1sKHttYXJrZG93biwgaW5wdXRGaWx0ZXJzfSk7XG4gICAgY29uc3QgbmV3SFRNTCA9IGhlbHBlcnMubWFya2Rvd25Ub0h0bWwoe21hcmtkb3duOiBfbWFya2Rvd24sIGlucHV0RmlsdGVyc30pO1xuICAgIGlmIChvbGRIVE1MICE9PSBuZXdIVE1MKSBvbkVkaXQoX21hcmtkb3duKTtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUhUTUxCbHVyID0gKGUpID0+IHtcbiAgICBjb25zdCBodG1sID0gZS50YXJnZXQuaW5uZXJIVE1MO1xuICAgIGNvbnN0IF9tYXJrZG93biA9IGhlbHBlcnMuaHRtbFRvTWFya2Rvd24oe2h0bWwsIG91dHB1dEZpbHRlcnN9KTtcbiAgICBoYW5kbGVCbHVyKF9tYXJrZG93bik7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUmF3Qmx1ciA9IChlKSA9PiB7XG4gICAgY29uc3QgX21hcmtkb3duID0gaGVscGVycy5maWx0ZXIoe1xuICAgICAgc3RyaW5nOiBlLnRhcmdldC5pbm5lclRleHQsXG4gICAgICBmaWx0ZXJzOiBvdXRwdXRGaWx0ZXJzXG4gICAgfSk7XG4gICAgaGFuZGxlQmx1cihfbWFya2Rvd24pO1xuICB9O1xuXG4gIFxuICBpZiAocmF3KSB7XG4gICAgY29uc3QgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPSB7IF9faHRtbDogbWFya2Rvd24gfTtcbiAgICBjb21wb25lbnQgPSAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tYXJrZG93bn1cbiAgICAgID5cbiAgICAgICAgPHByZVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5wcmV9XG4gICAgICAgICAgZGlyPVwiYXV0b1wiXG4gICAgICAgICAgY29udGVudEVkaXRhYmxlPXtlZGl0YWJsZX1cbiAgICAgICAgICBvbkJsdXI9e2hhbmRsZVJhd0JsdXJ9XG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkYW5nZXJvdXNseVNldElubmVySFRNTCA9IHsgX19odG1sOiBoZWxwZXJzLm1hcmtkb3duVG9IdG1sKHttYXJrZG93biwgaW5wdXRGaWx0ZXJzfSkgfTtcbiAgICBjb21wb25lbnQgPSAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5odG1sfVxuICAgICAgICBkaXI9XCJhdXRvXCJcbiAgICAgICAgY29udGVudEVkaXRhYmxlPXtlZGl0YWJsZX1cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MfVxuICAgICAgICBvbkJsdXI9e2hhbmRsZUhUTUxCbHVyfVxuICAgICAgLz5cbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMud3JhcHBlcn1cbiAgICAgID5cbiAgICAgICAge2NvbXBvbmVudH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQmxvY2tFZGl0YWJsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKiBAaWdub3JlICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgLyoqIEluaXRpYWwgbWFya2Rvd24gZm9yIHRoZSBlZGl0b3IuICovXG4gIG1hcmtkb3duOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIC8qKiBGdW5jdGlvbiB0byBwcm9wb2dhdGUgY2hhbmdlcyB0byB0aGUgbWFya2Rvd24uICovXG4gIG9uRWRpdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLyoqIFJlcGxhY2Ugc3RyaW5ncyBiZWZvcmUgcmVuZGVyaW5nLiAqL1xuICBpbnB1dEZpbHRlcnM6IFByb3BUeXBlcy5hcnJheSxcbiAgLyoqIFJlcGxhY2Ugc3RyaW5ncyBhZnRlciBlZGl0aW5nLiAqL1xuICBvdXRwdXRGaWx0ZXJzOiBQcm9wVHlwZXMuYXJyYXksXG4gIC8qKiBDU1MgZm9yIHRoZSBjb21wb25lbnQuICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKiogRGlzcGxheSBSYXcgTWFya2Rvd24gb3IgSFRNTC4gKi9cbiAgcmF3OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIEVuYWJsZS9EaXNhYmxlIGVkaXRhYmlsaXR5LiAqL1xuICBlZGl0YWJsZTogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5CbG9ja0VkaXRhYmxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgbWFya2Rvd246ICcnLFxuICBvbkVkaXQ6ICgpID0+IHt9LFxuICBpbnB1dEZpbHRlcnM6IFtdLFxuICBvdXRwdXRGaWx0ZXJzOiBbXSxcbiAgc3R5bGU6IHt9LFxuICByYXc6IGZhbHNlLFxuICBlZGl0YWJsZTogdHJ1ZSxcbn07XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gIHJvb3Q6IHtcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9LFxuICB3cmFwcGVyOiB7XG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgcGFkZGluZzogJzAgMC41ZW0nLFxuICB9LFxuICBodG1sOiB7XG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gIH0sXG4gIG1hcmtkb3duOiB7XG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBmb250U2l6ZTogJzEuMWVtJyxcbiAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gIH0sXG4gIHByZToge1xuICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCcsXG4gIH0sXG59KTtcblxuY29uc3QgYXJlRXF1YWwgPSAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+IHtcbiAgY29uc3Qga2V5cyA9IFsnbWFya2Rvd24nLCAncmF3JywgJ2VkaXRhYmxlJywgJ3N0eWxlJ107XG4gIGNvbnN0IGNoZWNrcyA9IGtleXMubWFwKGtleSA9PiAoSlNPTi5zdHJpbmdpZnkocHJldlByb3BzW2tleV0pID09PSBKU09OLnN0cmluZ2lmeShuZXh0UHJvcHNba2V5XSkpKTtcbiAgY29uc3QgZXF1YWwgPSAhY2hlY2tzLmluY2x1ZGVzKGZhbHNlKTtcbiAgLy8gY29uc29sZS5sb2coJ0Jsb2NrRWRpdGFibGUnLCBrZXlzLCBjaGVja3MsIGVxdWFsKTtcbiAgcmV0dXJuIGVxdWFsO1xufTtcblxuLy8gQmxvY2tFZGl0YWJsZS53aHlEaWRZb3VSZW5kZXIgPSB0cnVlO1xuY29uc3QgU3R5bGVDb21wb25lbnQgPSB3aXRoU3R5bGVzKHN0eWxlcykoQmxvY2tFZGl0YWJsZSk7XG5jb25zdCBNZW1vQ29tcG9uZW50ID0gUmVhY3QubWVtbyhTdHlsZUNvbXBvbmVudCwgYXJlRXF1YWwpO1xuZXhwb3J0IGRlZmF1bHQgTWVtb0NvbXBvbmVudDtcbiJdfQ==