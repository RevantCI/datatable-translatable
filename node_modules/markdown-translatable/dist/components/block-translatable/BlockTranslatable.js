"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _blockEditable = _interopRequireDefault(require("../block-editable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const whyDidYouRender = (process.env.NODE_ENV !== 'production') ?
//   require('@welldone-software/why-did-you-render') : undefined;
// if (whyDidYouRender) whyDidYouRender(React);

/**
 * ### A reusable component for translating Markdown as HTML.
 * @component
 */
function BlockTranslatable(_ref) {
  var classes = _ref.classes,
      original = _ref.original,
      translation = _ref.translation,
      onTranslation = _ref.onTranslation,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      style = _ref.style,
      raw = _ref.raw;
  return _react.default.createElement(_core.Grid, {
    container: true,
    wrap: "nowrap",
    spacing: 0,
    className: classes.root,
    style: style
  }, _react.default.createElement(_core.Grid, {
    item: true,
    xs: 12,
    className: classes.original
  }, _react.default.createElement(_blockEditable.default, {
    markdown: original,
    inputFilters: inputFilters,
    outputFilters: outputFilters,
    raw: raw,
    editable: false
  })), _react.default.createElement(_core.Grid, {
    item: true,
    xs: 12,
    className: classes.translation
  }, _react.default.createElement(_blockEditable.default, {
    markdown: translation,
    inputFilters: inputFilters,
    outputFilters: outputFilters,
    onEdit: onTranslation,
    raw: raw
  })));
}

;
BlockTranslatable.propTypes = {
  /** Original markdown for the editor. */
  original: _propTypes.default.string.isRequired,

  /** Translation markdown for the editor. */
  translation: _propTypes.default.string.isRequired,

  /** Function to propogate changes to the translation. */
  onTranslation: _propTypes.default.func.isRequired,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object,

  /** Display Raw Markdown or HTML. */
  raw: _propTypes.default.bool
};
BlockTranslatable.defaultProps = {
  original: '',
  translation: '',
  onTranslation: function onTranslation() {},
  inputFilters: [],
  outputFilters: [],
  style: {},
  raw: false
};

var styles = function styles(theme) {
  return {
    root: {},
    original: {
      background: '#eee4'
    },
    translation: {}
  };
};

var areEqual = function areEqual(prevProps, nextProps) {
  var keys = ['original', 'translation', 'raw', 'style'];
  var checks = keys.map(function (key) {
    return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);
  });
  var equal = !checks.includes(false); // console.log('BlockTranslatable', keys, checks, equal);

  return equal;
}; // BlockTranslatable.whyDidYouRender = true;


var StyleComponent = (0, _styles.withStyles)(styles)(BlockTranslatable);

var MemoComponent = _react.default.memo(StyleComponent, areEqual);

var _default = MemoComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2Jsb2NrLXRyYW5zbGF0YWJsZS9CbG9ja1RyYW5zbGF0YWJsZS5qcyJdLCJuYW1lcyI6WyJCbG9ja1RyYW5zbGF0YWJsZSIsImNsYXNzZXMiLCJvcmlnaW5hbCIsInRyYW5zbGF0aW9uIiwib25UcmFuc2xhdGlvbiIsImlucHV0RmlsdGVycyIsIm91dHB1dEZpbHRlcnMiLCJzdHlsZSIsInJhdyIsInJvb3QiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZnVuYyIsImFycmF5Iiwib2JqZWN0IiwiYm9vbCIsImRlZmF1bHRQcm9wcyIsInN0eWxlcyIsInRoZW1lIiwiYmFja2dyb3VuZCIsImFyZUVxdWFsIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwia2V5cyIsImNoZWNrcyIsIm1hcCIsImtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcXVhbCIsImluY2x1ZGVzIiwiU3R5bGVDb21wb25lbnQiLCJNZW1vQ29tcG9uZW50IiwiUmVhY3QiLCJtZW1vIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7Ozs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7Ozs7QUFJQSxTQUFTQSxpQkFBVCxPQVNHO0FBQUEsTUFSREMsT0FRQyxRQVJEQSxPQVFDO0FBQUEsTUFQREMsUUFPQyxRQVBEQSxRQU9DO0FBQUEsTUFOREMsV0FNQyxRQU5EQSxXQU1DO0FBQUEsTUFMREMsYUFLQyxRQUxEQSxhQUtDO0FBQUEsTUFKREMsWUFJQyxRQUpEQSxZQUlDO0FBQUEsTUFIREMsYUFHQyxRQUhEQSxhQUdDO0FBQUEsTUFGREMsS0FFQyxRQUZEQSxLQUVDO0FBQUEsTUFEREMsR0FDQyxRQUREQSxHQUNDO0FBQ0QsU0FDRSw2QkFBQyxVQUFEO0FBQ0UsSUFBQSxTQUFTLE1BRFg7QUFFRSxJQUFBLElBQUksRUFBQyxRQUZQO0FBR0UsSUFBQSxPQUFPLEVBQUUsQ0FIWDtBQUlFLElBQUEsU0FBUyxFQUFFUCxPQUFPLENBQUNRLElBSnJCO0FBS0UsSUFBQSxLQUFLLEVBQUVGO0FBTFQsS0FPRSw2QkFBQyxVQUFEO0FBQ0UsSUFBQSxJQUFJLE1BRE47QUFFRSxJQUFBLEVBQUUsRUFBRSxFQUZOO0FBR0UsSUFBQSxTQUFTLEVBQUVOLE9BQU8sQ0FBQ0M7QUFIckIsS0FLRSw2QkFBQyxzQkFBRDtBQUNFLElBQUEsUUFBUSxFQUFFQSxRQURaO0FBRUUsSUFBQSxZQUFZLEVBQUVHLFlBRmhCO0FBR0UsSUFBQSxhQUFhLEVBQUVDLGFBSGpCO0FBSUUsSUFBQSxHQUFHLEVBQUVFLEdBSlA7QUFLRSxJQUFBLFFBQVEsRUFBRTtBQUxaLElBTEYsQ0FQRixFQW9CRSw2QkFBQyxVQUFEO0FBQ0UsSUFBQSxJQUFJLE1BRE47QUFFRSxJQUFBLEVBQUUsRUFBRSxFQUZOO0FBR0UsSUFBQSxTQUFTLEVBQUVQLE9BQU8sQ0FBQ0U7QUFIckIsS0FLRSw2QkFBQyxzQkFBRDtBQUNFLElBQUEsUUFBUSxFQUFFQSxXQURaO0FBRUUsSUFBQSxZQUFZLEVBQUVFLFlBRmhCO0FBR0UsSUFBQSxhQUFhLEVBQUVDLGFBSGpCO0FBSUUsSUFBQSxNQUFNLEVBQUVGLGFBSlY7QUFLRSxJQUFBLEdBQUcsRUFBRUk7QUFMUCxJQUxGLENBcEJGLENBREY7QUFvQ0Q7O0FBQUE7QUFFRFIsaUJBQWlCLENBQUNVLFNBQWxCLEdBQThCO0FBQzVCO0FBQ0FSLEVBQUFBLFFBQVEsRUFBRVMsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRkM7O0FBRzVCO0FBQ0FWLEVBQUFBLFdBQVcsRUFBRVEsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBSkY7O0FBSzVCO0FBQ0FULEVBQUFBLGFBQWEsRUFBRU8sbUJBQVVHLElBQVYsQ0FBZUQsVUFORjs7QUFPNUI7QUFDQVIsRUFBQUEsWUFBWSxFQUFFTSxtQkFBVUksS0FSSTs7QUFTNUI7QUFDQVQsRUFBQUEsYUFBYSxFQUFFSyxtQkFBVUksS0FWRzs7QUFXNUI7QUFDQVIsRUFBQUEsS0FBSyxFQUFFSSxtQkFBVUssTUFaVzs7QUFhNUI7QUFDQVIsRUFBQUEsR0FBRyxFQUFFRyxtQkFBVU07QUFkYSxDQUE5QjtBQWlCQWpCLGlCQUFpQixDQUFDa0IsWUFBbEIsR0FBaUM7QUFDL0JoQixFQUFBQSxRQUFRLEVBQUUsRUFEcUI7QUFFL0JDLEVBQUFBLFdBQVcsRUFBRSxFQUZrQjtBQUcvQkMsRUFBQUEsYUFBYSxFQUFFLHlCQUFNLENBQUUsQ0FIUTtBQUkvQkMsRUFBQUEsWUFBWSxFQUFFLEVBSmlCO0FBSy9CQyxFQUFBQSxhQUFhLEVBQUUsRUFMZ0I7QUFNL0JDLEVBQUFBLEtBQUssRUFBRSxFQU53QjtBQU8vQkMsRUFBQUEsR0FBRyxFQUFFO0FBUDBCLENBQWpDOztBQVVBLElBQU1XLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQUFDLEtBQUs7QUFBQSxTQUFLO0FBQ3ZCWCxJQUFBQSxJQUFJLEVBQUUsRUFEaUI7QUFHdkJQLElBQUFBLFFBQVEsRUFBRTtBQUNSbUIsTUFBQUEsVUFBVSxFQUFFO0FBREosS0FIYTtBQU12QmxCLElBQUFBLFdBQVcsRUFBRTtBQU5VLEdBQUw7QUFBQSxDQUFwQjs7QUFVQSxJQUFNbUIsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0MsU0FBRCxFQUFZQyxTQUFaLEVBQTBCO0FBQ3pDLE1BQU1DLElBQUksR0FBRyxDQUFDLFVBQUQsRUFBYSxhQUFiLEVBQTRCLEtBQTVCLEVBQW1DLE9BQW5DLENBQWI7QUFDQSxNQUFNQyxNQUFNLEdBQUdELElBQUksQ0FBQ0UsR0FBTCxDQUFTLFVBQUFDLEdBQUc7QUFBQSxXQUFLQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVAsU0FBUyxDQUFDSyxHQUFELENBQXhCLE1BQW1DQyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sU0FBUyxDQUFDSSxHQUFELENBQXhCLENBQXhDO0FBQUEsR0FBWixDQUFmO0FBQ0EsTUFBTUcsS0FBSyxHQUFHLENBQUNMLE1BQU0sQ0FBQ00sUUFBUCxDQUFnQixLQUFoQixDQUFmLENBSHlDLENBSXpDOztBQUNBLFNBQU9ELEtBQVA7QUFDRCxDQU5ELEMsQ0FRQTs7O0FBQ0EsSUFBTUUsY0FBYyxHQUFHLHdCQUFXZCxNQUFYLEVBQW1CbkIsaUJBQW5CLENBQXZCOztBQUNBLElBQU1rQyxhQUFhLEdBQUdDLGVBQU1DLElBQU4sQ0FBV0gsY0FBWCxFQUEyQlgsUUFBM0IsQ0FBdEI7O2VBQ2VZLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHtcbiAgR3JpZCxcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEJsb2NrRWRpdGFibGUgZnJvbSAnLi4vYmxvY2stZWRpdGFibGUnO1xuXG4vLyBjb25zdCB3aHlEaWRZb3VSZW5kZXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgP1xuLy8gICByZXF1aXJlKCdAd2VsbGRvbmUtc29mdHdhcmUvd2h5LWRpZC15b3UtcmVuZGVyJykgOiB1bmRlZmluZWQ7XG4vLyBpZiAod2h5RGlkWW91UmVuZGVyKSB3aHlEaWRZb3VSZW5kZXIoUmVhY3QpO1xuLyoqXG4gKiAjIyMgQSByZXVzYWJsZSBjb21wb25lbnQgZm9yIHRyYW5zbGF0aW5nIE1hcmtkb3duIGFzIEhUTUwuXG4gKiBAY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIEJsb2NrVHJhbnNsYXRhYmxlKHtcbiAgY2xhc3NlcyxcbiAgb3JpZ2luYWwsXG4gIHRyYW5zbGF0aW9uLFxuICBvblRyYW5zbGF0aW9uLFxuICBpbnB1dEZpbHRlcnMsXG4gIG91dHB1dEZpbHRlcnMsXG4gIHN0eWxlLFxuICByYXcsXG59KSB7XG4gIHJldHVybiAoXG4gICAgPEdyaWRcbiAgICAgIGNvbnRhaW5lclxuICAgICAgd3JhcD1cIm5vd3JhcFwiXG4gICAgICBzcGFjaW5nPXswfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgPlxuICAgICAgPEdyaWRcbiAgICAgICAgaXRlbVxuICAgICAgICB4cz17MTJ9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5vcmlnaW5hbH1cbiAgICAgID5cbiAgICAgICAgPEJsb2NrRWRpdGFibGVcbiAgICAgICAgICBtYXJrZG93bj17b3JpZ2luYWx9XG4gICAgICAgICAgaW5wdXRGaWx0ZXJzPXtpbnB1dEZpbHRlcnN9XG4gICAgICAgICAgb3V0cHV0RmlsdGVycz17b3V0cHV0RmlsdGVyc31cbiAgICAgICAgICByYXc9e3Jhd31cbiAgICAgICAgICBlZGl0YWJsZT17ZmFsc2V9XG4gICAgICAgIC8+XG4gICAgICA8L0dyaWQ+XG4gICAgICA8R3JpZFxuICAgICAgICBpdGVtXG4gICAgICAgIHhzPXsxMn1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRyYW5zbGF0aW9ufVxuICAgICAgPlxuICAgICAgICA8QmxvY2tFZGl0YWJsZVxuICAgICAgICAgIG1hcmtkb3duPXt0cmFuc2xhdGlvbn1cbiAgICAgICAgICBpbnB1dEZpbHRlcnM9e2lucHV0RmlsdGVyc31cbiAgICAgICAgICBvdXRwdXRGaWx0ZXJzPXtvdXRwdXRGaWx0ZXJzfVxuICAgICAgICAgIG9uRWRpdD17b25UcmFuc2xhdGlvbn1cbiAgICAgICAgICByYXc9e3Jhd31cbiAgICAgICAgLz5cbiAgICAgIDwvR3JpZD5cbiAgICA8L0dyaWQ+XG4gICk7XG59O1xuXG5CbG9ja1RyYW5zbGF0YWJsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKiBPcmlnaW5hbCBtYXJrZG93biBmb3IgdGhlIGVkaXRvci4gKi9cbiAgb3JpZ2luYWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgLyoqIFRyYW5zbGF0aW9uIG1hcmtkb3duIGZvciB0aGUgZWRpdG9yLiAqL1xuICB0cmFuc2xhdGlvbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAvKiogRnVuY3Rpb24gdG8gcHJvcG9nYXRlIGNoYW5nZXMgdG8gdGhlIHRyYW5zbGF0aW9uLiAqL1xuICBvblRyYW5zbGF0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKiogUmVwbGFjZSBzdHJpbmdzIGJlZm9yZSByZW5kZXJpbmcuICovXG4gIGlucHV0RmlsdGVyczogUHJvcFR5cGVzLmFycmF5LFxuICAvKiogUmVwbGFjZSBzdHJpbmdzIGFmdGVyIGVkaXRpbmcuICovXG4gIG91dHB1dEZpbHRlcnM6IFByb3BUeXBlcy5hcnJheSxcbiAgLyoqIENTUyBmb3IgdGhlIGNvbXBvbmVudC4gKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKiBEaXNwbGF5IFJhdyBNYXJrZG93biBvciBIVE1MLiAqL1xuICByYXc6IFByb3BUeXBlcy5ib29sLFxufTtcblxuQmxvY2tUcmFuc2xhdGFibGUuZGVmYXVsdFByb3BzID0ge1xuICBvcmlnaW5hbDogJycsXG4gIHRyYW5zbGF0aW9uOiAnJyxcbiAgb25UcmFuc2xhdGlvbjogKCkgPT4ge30sXG4gIGlucHV0RmlsdGVyczogW10sXG4gIG91dHB1dEZpbHRlcnM6IFtdLFxuICBzdHlsZToge30sXG4gIHJhdzogZmFsc2UsXG59O1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICByb290OiB7XG4gIH0sXG4gIG9yaWdpbmFsOiB7XG4gICAgYmFja2dyb3VuZDogJyNlZWU0JyxcbiAgfSxcbiAgdHJhbnNsYXRpb246IHtcbiAgfSxcbn0pO1xuXG5jb25zdCBhcmVFcXVhbCA9IChwcmV2UHJvcHMsIG5leHRQcm9wcykgPT4ge1xuICBjb25zdCBrZXlzID0gWydvcmlnaW5hbCcsICd0cmFuc2xhdGlvbicsICdyYXcnLCAnc3R5bGUnXTtcbiAgY29uc3QgY2hlY2tzID0ga2V5cy5tYXAoa2V5ID0+IChKU09OLnN0cmluZ2lmeShwcmV2UHJvcHNba2V5XSkgPT09IEpTT04uc3RyaW5naWZ5KG5leHRQcm9wc1trZXldKSkpO1xuICBjb25zdCBlcXVhbCA9ICFjaGVja3MuaW5jbHVkZXMoZmFsc2UpO1xuICAvLyBjb25zb2xlLmxvZygnQmxvY2tUcmFuc2xhdGFibGUnLCBrZXlzLCBjaGVja3MsIGVxdWFsKTtcbiAgcmV0dXJuIGVxdWFsO1xufTtcblxuLy8gQmxvY2tUcmFuc2xhdGFibGUud2h5RGlkWW91UmVuZGVyID0gdHJ1ZTtcbmNvbnN0IFN0eWxlQ29tcG9uZW50ID0gd2l0aFN0eWxlcyhzdHlsZXMpKEJsb2NrVHJhbnNsYXRhYmxlKTtcbmNvbnN0IE1lbW9Db21wb25lbnQgPSBSZWFjdC5tZW1vKFN0eWxlQ29tcG9uZW50LCBhcmVFcXVhbCk7XG5leHBvcnQgZGVmYXVsdCBNZW1vQ29tcG9uZW50O1xuIl19