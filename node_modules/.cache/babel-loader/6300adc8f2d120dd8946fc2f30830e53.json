{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styles = require(\"@material-ui/core/styles\");\n\nvar helpers = _interopRequireWildcard(require(\"./helpers\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // const whyDidYouRender = (process.env.NODE_ENV !== 'production') ?\n//   require('@welldone-software/why-did-you-render') : undefined;\n// if (whyDidYouRender) whyDidYouRender(React);\n\n/**\n * ### A reusable component for translating a Markdown block as HTML.\n * @component\n */\n\n\nfunction BlockEditable(_ref) {\n  var classes = _ref.classes,\n      markdown = _ref.markdown,\n      onEdit = _ref.onEdit,\n      inputFilters = _ref.inputFilters,\n      outputFilters = _ref.outputFilters,\n      style = _ref.style,\n      raw = _ref.raw,\n      editable = _ref.editable;\n  var component;\n\n  var handleBlur = function handleBlur(_markdown) {\n    var oldHTML = helpers.markdownToHtml({\n      markdown: markdown,\n      inputFilters: inputFilters\n    });\n    var newHTML = helpers.markdownToHtml({\n      markdown: _markdown,\n      inputFilters: inputFilters\n    });\n    if (oldHTML !== newHTML) onEdit(_markdown);\n  };\n\n  var handleHTMLBlur = function handleHTMLBlur(e) {\n    var html = e.target.innerHTML;\n\n    var _markdown = helpers.htmlToMarkdown({\n      html: html,\n      outputFilters: outputFilters\n    });\n\n    handleBlur(_markdown);\n  };\n\n  var handleRawBlur = function handleRawBlur(e) {\n    var _markdown = helpers.filter({\n      string: e.target.innerText,\n      filters: outputFilters\n    });\n\n    handleBlur(_markdown);\n  };\n\n  if (raw) {\n    var dangerouslySetInnerHTML = {\n      __html: markdown\n    };\n    component = _react[\"default\"].createElement(\"div\", {\n      className: classes.markdown\n    }, _react[\"default\"].createElement(\"pre\", {\n      className: classes.pre,\n      dir: \"auto\",\n      contentEditable: editable,\n      onBlur: handleRawBlur,\n      dangerouslySetInnerHTML: dangerouslySetInnerHTML\n    }));\n  } else {\n    var _dangerouslySetInnerHTML = {\n      __html: helpers.markdownToHtml({\n        markdown: markdown,\n        inputFilters: inputFilters\n      })\n    };\n    component = _react[\"default\"].createElement(\"div\", {\n      className: classes.html,\n      dir: \"auto\",\n      contentEditable: editable,\n      dangerouslySetInnerHTML: _dangerouslySetInnerHTML,\n      onBlur: handleHTMLBlur\n    });\n  }\n\n  return _react[\"default\"].createElement(\"div\", {\n    className: classes.root,\n    style: style\n  }, _react[\"default\"].createElement(\"div\", {\n    className: classes.wrapper\n  }, component));\n}\n\n;\nBlockEditable.propTypes = {\n  /** @ignore */\n  classes: _propTypes[\"default\"].object.isRequired,\n\n  /** Initial markdown for the editor. */\n  markdown: _propTypes[\"default\"].string.isRequired,\n\n  /** Function to propogate changes to the markdown. */\n  onEdit: _propTypes[\"default\"].func.isRequired,\n\n  /** Replace strings before rendering. */\n  inputFilters: _propTypes[\"default\"].array,\n\n  /** Replace strings after editing. */\n  outputFilters: _propTypes[\"default\"].array,\n\n  /** CSS for the component. */\n  style: _propTypes[\"default\"].object,\n\n  /** Display Raw Markdown or HTML. */\n  raw: _propTypes[\"default\"].bool,\n\n  /** Enable/Disable editability. */\n  editable: _propTypes[\"default\"].bool\n};\nBlockEditable.defaultProps = {\n  markdown: '',\n  onEdit: function onEdit() {},\n  inputFilters: [],\n  outputFilters: [],\n  style: {},\n  raw: false,\n  editable: true\n};\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      height: '100%',\n      width: '100%'\n    },\n    wrapper: {\n      height: '100%',\n      padding: '0 0.5em'\n    },\n    html: {\n      height: '100%',\n      width: '100%',\n      display: 'grid'\n    },\n    markdown: {\n      height: '100%',\n      width: '100%',\n      fontSize: '1.1em',\n      display: 'grid'\n    },\n    pre: {\n      whiteSpace: 'pre-wrap'\n    }\n  };\n};\n\nvar areEqual = function areEqual(prevProps, nextProps) {\n  var keys = ['markdown', 'raw', 'editable', 'style'];\n  var checks = keys.map(function (key) {\n    return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);\n  });\n  var equal = !checks.includes(false); // console.log('BlockEditable', keys, checks, equal);\n\n  return equal;\n}; // BlockEditable.whyDidYouRender = true;\n\n\nvar StyleComponent = (0, _styles.withStyles)(styles)(BlockEditable);\n\nvar MemoComponent = _react[\"default\"].memo(StyleComponent, areEqual);\n\nvar _default = MemoComponent;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}