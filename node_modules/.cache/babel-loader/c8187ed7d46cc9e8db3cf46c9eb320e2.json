{"ast":null,"code":"import _toConsumableArray from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/DataTable.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from \"mui-datatables\";\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { getMuiTheme } from './muiTheme';\nimport Cell from './Cell';\nimport CustomToolbar from './CustomToolbar';\nimport { parseDataTables } from './helpers';\n\nfunction DataTable(_ref) {\n  var original = _ref.original,\n      translation = _ref.translation,\n      options = _ref.options,\n      delimiters = _ref.delimiters,\n      _ref$config = _ref.config,\n      compositeKeyIndices = _ref$config.compositeKeyIndices,\n      columnsFilter = _ref$config.columnsFilter,\n      columnsShowDefault = _ref$config.columnsShowDefault,\n      rowHeader = _ref$config.rowHeader,\n      props = _objectWithoutProperties(_ref, [\"original\", \"translation\", \"options\", \"delimiters\", \"config\"]);\n\n  var _useState = useState(25),\n      _useState2 = _slicedToArray(_useState, 2),\n      rowsPerPage = _useState2[0],\n      setRowsPerPage = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      preview = _useState4[0],\n      setPreview = _useState4[1];\n\n  var togglePreview = function togglePreview() {\n    return setPreview(!preview);\n  };\n\n  var onSave = function onSave() {};\n\n  var _options = _objectSpread({\n    responsive: 'scroll',\n    fixedHeader: false,\n    resizableColumns: false,\n    selectableRows: 'none',\n    rowHover: false,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [25, 50, 100],\n    onChangeRowsPerPage: setRowsPerPage,\n    download: false,\n    print: false,\n    customToolbar: function customToolbar() {\n      return React.createElement(CustomToolbar, {\n        preview: preview,\n        onPreview: togglePreview,\n        onSave: onSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    }\n  }, options);\n\n  var columns = [];\n  var data = [];\n\n  if (original && translation) {\n    var dataTable = parseDataTables({\n      original: original,\n      translation: translation,\n      compositeKeyIndices: compositeKeyIndices,\n      delimiters: delimiters\n    });\n\n    var customBodyRender = function customBodyRender(value, tableMeta, updateValue) {\n      return React.createElement(Cell, {\n        value: value,\n        rowHeader: rowHeader,\n        tableMeta: tableMeta,\n        preview: preview,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    };\n\n    columns = dataTable.columnNames.map(function (name, index) {\n      return {\n        name: name,\n        searchable: true,\n        options: {\n          display: columnsShowDefault.includes(index),\n          filter: columnsFilter.includes(index),\n          customBodyRender: customBodyRender\n        }\n      };\n    });\n\n    if (rowHeader) {\n      var headerColumn = {\n        name: 'rowHeader',\n        options: {\n          filter: false,\n          customBodyRender: customBodyRender\n        }\n      };\n      columns.unshift(headerColumn);\n      data = dataTable.data.map(function (row) {\n        return ['rowHeader'].concat(_toConsumableArray(row));\n      });\n    } else {\n      data = dataTable.data;\n    }\n  }\n\n  return React.createElement(MuiThemeProvider, {\n    theme: getMuiTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(MUIDataTable, Object.assign({\n    columns: columns,\n    data: data,\n    options: _options\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })));\n}\n\nDataTable.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** Original DataTable raw string or file contents */\n  original: PropTypes.string.isRequired,\n\n  /** Translated DataTable raw string or file contents */\n  translation: PropTypes.string.isRequired,\n\n  /** The delimiters for converting the file into rows/columns */\n  delimiters: PropTypes.shape({\n    /** The delimiters for converting the file into rows \"\\n\" */\n    row: PropTypes.string.isRequired,\n\n    /** The delimiters for converting the row into cells \"\\t\" */\n    cell: PropTypes.string.isRequired\n  }).isRequired,\n\n  /** Configuration options */\n  config: PropTypes.shape({\n    /** Combined Column Indices to correlate original and translated rows  */\n    compositeKeyIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    /** Columns that are Filterable */\n    columnsFilter: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    /** Columns that are shown by default */\n    columnsShowDefault: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    /** The function to render as a header for the row, return a React Component */\n    rowHeader: PropTypes.func\n  }),\n\n  /** Options to override or pass through to MUIDataTables */\n  options: PropTypes.object\n};\nDataTable.defaultProps = {\n  config: {},\n  delimiters: {\n    row: '\\n',\n    cell: '\\t'\n  }\n};\nexport default DataTable;","map":{"version":3,"sources":["/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/DataTable.js"],"names":["React","useState","PropTypes","MUIDataTable","MuiThemeProvider","getMuiTheme","Cell","CustomToolbar","parseDataTables","DataTable","original","translation","options","delimiters","config","compositeKeyIndices","columnsFilter","columnsShowDefault","rowHeader","props","rowsPerPage","setRowsPerPage","preview","setPreview","togglePreview","onSave","_options","responsive","fixedHeader","resizableColumns","selectableRows","rowHover","rowsPerPageOptions","onChangeRowsPerPage","download","print","customToolbar","columns","data","dataTable","customBodyRender","value","tableMeta","updateValue","columnNames","map","name","index","searchable","display","includes","filter","headerColumn","unshift","row","propTypes","classes","object","isRequired","string","shape","cell","arrayOf","number","func","defaultProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,SAASC,eAAT,QAAgC,WAAhC;;AAEA,SAASC,SAAT,OAYG;AAAA,MAXDC,QAWC,QAXDA,QAWC;AAAA,MAVDC,WAUC,QAVDA,WAUC;AAAA,MATDC,OASC,QATDA,OASC;AAAA,MARDC,UAQC,QARDA,UAQC;AAAA,yBAPDC,MAOC;AAAA,MANCC,mBAMD,eANCA,mBAMD;AAAA,MALCC,aAKD,eALCA,aAKD;AAAA,MAJCC,kBAID,eAJCA,kBAID;AAAA,MAHCC,SAGD,eAHCA,SAGD;AAAA,MADEC,KACF;;AAAA,kBACqClB,QAAQ,CAAC,EAAD,CAD7C;AAAA;AAAA,MACMmB,WADN;AAAA,MACmBC,cADnB;;AAAA,mBAE6BpB,QAAQ,CAAC,IAAD,CAFrC;AAAA;AAAA,MAEMqB,OAFN;AAAA,MAEeC,UAFf;;AAID,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMD,UAAU,CAAC,CAACD,OAAF,CAAhB;AAAA,GAAtB;;AACA,MAAMG,MAAM,GAAG,SAATA,MAAS,GAAM,CAAE,CAAvB;;AAEA,MAAMC,QAAQ;AACZC,IAAAA,UAAU,EAAE,QADA;AAEZC,IAAAA,WAAW,EAAE,KAFD;AAGZC,IAAAA,gBAAgB,EAAE,KAHN;AAIZC,IAAAA,cAAc,EAAE,MAJJ;AAKZC,IAAAA,QAAQ,EAAE,KALE;AAMZX,IAAAA,WAAW,EAAEA,WAND;AAOZY,IAAAA,kBAAkB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,CAPR;AAQZC,IAAAA,mBAAmB,EAAEZ,cART;AASZa,IAAAA,QAAQ,EAAE,KATE;AAUZC,IAAAA,KAAK,EAAE,KAVK;AAWZC,IAAAA,aAAa,EAAE;AAAA,aACb,oBAAC,aAAD;AACE,QAAA,OAAO,EAAEd,OADX;AAEE,QAAA,SAAS,EAAEE,aAFb;AAGE,QAAA,MAAM,EAAEC,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADa;AAAA;AAXH,KAkBTb,OAlBS,CAAd;;AAqBA,MAAIyB,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAI5B,QAAQ,IAAIC,WAAhB,EAA6B;AAC3B,QAAM4B,SAAS,GAAG/B,eAAe,CAAC;AAChCE,MAAAA,QAAQ,EAARA,QADgC;AAEhCC,MAAAA,WAAW,EAAXA,WAFgC;AAGhCI,MAAAA,mBAAmB,EAAnBA,mBAHgC;AAIhCF,MAAAA,UAAU,EAAVA;AAJgC,KAAD,CAAjC;;AAMA,QAAM2B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,WAAnB;AAAA,aACvB,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,KAAb;AAAoB,QAAA,SAAS,EAAEvB,SAA/B;AAA0C,QAAA,SAAS,EAAEwB,SAArD;AAAgE,QAAA,OAAO,EAAEpB,OAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADuB;AAAA,KAAzB;;AAGAe,IAAAA,OAAO,GAAGE,SAAS,CAACK,WAAV,CAAsBC,GAAtB,CAA0B,UAACC,IAAD,EAAOC,KAAP;AAAA,aAAkB;AACpDD,QAAAA,IAAI,EAAJA,IADoD;AAEpDE,QAAAA,UAAU,EAAE,IAFwC;AAGpDpC,QAAAA,OAAO,EAAE;AACPqC,UAAAA,OAAO,EAAEhC,kBAAkB,CAACiC,QAAnB,CAA4BH,KAA5B,CADF;AAEPI,UAAAA,MAAM,EAAEnC,aAAa,CAACkC,QAAd,CAAuBH,KAAvB,CAFD;AAGPP,UAAAA,gBAAgB,EAAhBA;AAHO;AAH2C,OAAlB;AAAA,KAA1B,CAAV;;AASA,QAAItB,SAAJ,EAAe;AACb,UAAMkC,YAAY,GAAG;AACnBN,QAAAA,IAAI,EAAE,WADa;AAEnBlC,QAAAA,OAAO,EAAE;AACPuC,UAAAA,MAAM,EAAE,KADD;AAEPX,UAAAA,gBAAgB,EAAhBA;AAFO;AAFU,OAArB;AAOAH,MAAAA,OAAO,CAACgB,OAAR,CAAgBD,YAAhB;AACAd,MAAAA,IAAI,GAAGC,SAAS,CAACD,IAAV,CAAeO,GAAf,CAAmB,UAAAS,GAAG;AAAA,gBAAK,WAAL,4BAAqBA,GAArB;AAAA,OAAtB,CAAP;AACD,KAVD,MAUO;AACLhB,MAAAA,IAAI,GAAGC,SAAS,CAACD,IAAjB;AACD;AACF;;AAED,SACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEjC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEgC,OADX;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,OAAO,EAAEZ;AAHX,KAIMP,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAUD;;AAEDV,SAAS,CAAC8C,SAAV,GAAsB;AACpB;AACAC,EAAAA,OAAO,EAAEtD,SAAS,CAACuD,MAAV,CAAiBC,UAFN;;AAGpB;AACAhD,EAAAA,QAAQ,EAAER,SAAS,CAACyD,MAAV,CAAiBD,UAJP;;AAKpB;AACA/C,EAAAA,WAAW,EAAET,SAAS,CAACyD,MAAV,CAAiBD,UANV;;AAOpB;AACA7C,EAAAA,UAAU,EAAEX,SAAS,CAAC0D,KAAV,CAAgB;AAC1B;AACAN,IAAAA,GAAG,EAAEpD,SAAS,CAACyD,MAAV,CAAiBD,UAFI;;AAG1B;AACAG,IAAAA,IAAI,EAAE3D,SAAS,CAACyD,MAAV,CAAiBD;AAJG,GAAhB,EAKTA,UAbiB;;AAcpB;AACA5C,EAAAA,MAAM,EAAEZ,SAAS,CAAC0D,KAAV,CAAgB;AACtB;AACA7C,IAAAA,mBAAmB,EAAEb,SAAS,CAAC4D,OAAV,CAAkB5D,SAAS,CAAC6D,MAA5B,EAAoCL,UAFnC;;AAGtB;AACA1C,IAAAA,aAAa,EAAEd,SAAS,CAAC4D,OAAV,CAAkB5D,SAAS,CAAC6D,MAA5B,EAAoCL,UAJ7B;;AAKtB;AACAzC,IAAAA,kBAAkB,EAAEf,SAAS,CAAC4D,OAAV,CAAkB5D,SAAS,CAAC6D,MAA5B,EAAoCL,UANlC;;AAOtB;AACAxC,IAAAA,SAAS,EAAEhB,SAAS,CAAC8D;AARC,GAAhB,CAfY;;AAyBpB;AACApD,EAAAA,OAAO,EAAEV,SAAS,CAACuD;AA1BC,CAAtB;AA6BAhD,SAAS,CAACwD,YAAV,GAAyB;AACvBnD,EAAAA,MAAM,EAAE,EADe;AAEvBD,EAAAA,UAAU,EAAE;AACVyC,IAAAA,GAAG,EAAE,IADK;AAEVO,IAAAA,IAAI,EAAE;AAFI;AAFW,CAAzB;AAQA,eAAepD,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from \"mui-datatables\";\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\nimport { getMuiTheme } from './muiTheme';\nimport Cell from './Cell';\nimport CustomToolbar from './CustomToolbar';\n\nimport { parseDataTables } from './helpers';\n\nfunction DataTable ({\n  original,\n  translation,\n  options,\n  delimiters,\n  config: {\n    compositeKeyIndices,\n    columnsFilter,\n    columnsShowDefault,\n    rowHeader,\n  },\n  ...props\n}) {\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [preview, setPreview] = useState(true);\n\n  const togglePreview = () => setPreview(!preview);\n  const onSave = () => {};\n\n  const _options = {\n    responsive: 'scroll',\n    fixedHeader: false,\n    resizableColumns: false,\n    selectableRows: 'none',\n    rowHover: false,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [25, 50, 100],\n    onChangeRowsPerPage: setRowsPerPage,\n    download: false,\n    print: false,\n    customToolbar: () => (\n      <CustomToolbar\n        preview={preview}\n        onPreview={togglePreview}\n        onSave={onSave}\n      />\n    ),\n    ...options\n  };\n  \n  let columns = [];\n  let data = [];\n  if (original && translation) {\n    const dataTable = parseDataTables({\n      original,\n      translation,\n      compositeKeyIndices,\n      delimiters,\n    });\n    const customBodyRender = (value, tableMeta, updateValue) => (\n      <Cell value={value} rowHeader={rowHeader} tableMeta={tableMeta} preview={preview} />\n    );\n    columns = dataTable.columnNames.map((name, index) => ({\n      name,\n      searchable: true,\n      options: {\n        display: columnsShowDefault.includes(index),\n        filter: columnsFilter.includes(index),\n        customBodyRender,\n      },\n    }));\n    if (rowHeader) {\n      const headerColumn = {\n        name: 'rowHeader',\n        options: {\n          filter: false,\n          customBodyRender,\n        },\n      };\n      columns.unshift(headerColumn);\n      data = dataTable.data.map(row => ['rowHeader', ...row]);\n    } else {\n      data = dataTable.data;\n    }\n  }\n\n  return (\n    <MuiThemeProvider theme={getMuiTheme}>\n      <MUIDataTable\n        columns={columns}\n        data={data}\n        options={_options}\n        {...props}\n      />\n    </MuiThemeProvider>\n  )\n}\n\nDataTable.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** Original DataTable raw string or file contents */\n  original: PropTypes.string.isRequired,\n  /** Translated DataTable raw string or file contents */\n  translation: PropTypes.string.isRequired,\n  /** The delimiters for converting the file into rows/columns */\n  delimiters: PropTypes.shape({\n    /** The delimiters for converting the file into rows \"\\n\" */\n    row: PropTypes.string.isRequired,\n    /** The delimiters for converting the row into cells \"\\t\" */\n    cell: PropTypes.string.isRequired,\n  }).isRequired,\n  /** Configuration options */\n  config: PropTypes.shape({\n    /** Combined Column Indices to correlate original and translated rows  */\n    compositeKeyIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /** Columns that are Filterable */\n    columnsFilter: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /** Columns that are shown by default */\n    columnsShowDefault: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /** The function to render as a header for the row, return a React Component */\n    rowHeader: PropTypes.func,\n  }),\n  /** Options to override or pass through to MUIDataTables */\n  options: PropTypes.object,\n};\n\nDataTable.defaultProps = {\n  config: {},\n  delimiters: {\n    row: '\\n',\n    cell: '\\t'\n  }\n}\n\nexport default DataTable;"]},"metadata":{},"sourceType":"module"}