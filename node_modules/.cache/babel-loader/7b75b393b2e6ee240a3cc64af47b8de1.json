{"ast":null,"code":"import _slicedToArray from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/Cell.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { BlockEditable } from 'markdown-translatable';\nvar style = {\n  padding: '0px'\n};\nvar inputFilters = [[/<br>/gi, '\\n']];\nvar outputFilters = [[/\\n/gi, '<br>']];\nvar blockStyle = {\n  display: 'inline-block',\n  width: '50%'\n};\n\nvar Cell = function Cell(_ref) {\n  var classes = _ref.classes,\n      value = _ref.value,\n      tableMeta = _ref.tableMeta,\n      _ref$tableMeta = _ref.tableMeta,\n      columnIndex = _ref$tableMeta.columnIndex,\n      rowIndex = _ref$tableMeta.rowIndex,\n      preview = _ref.preview;\n\n  var _value$split = value.split('\\t'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      original = _value$split2[0],\n      translation = _value$split2[1];\n\n  var onEdit = function onEdit(markdown) {\n    debugger; // editCell({rowIndex, columnIndex, value: markdown});\n  };\n\n  var originalComponent = React.createElement(BlockEditable, {\n    style: style,\n    raw: !preview,\n    markdown: original,\n    editable: false,\n    inputFilters: inputFilters,\n    outputFilters: outputFilters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  });\n  var translationComponent = React.createElement(BlockEditable, {\n    style: style,\n    raw: !preview,\n    markdown: translation,\n    editable: true,\n    inputFilters: inputFilters,\n    outputFilters: outputFilters,\n    onEdit: onEdit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: blockStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, originalComponent), React.createElement(\"div\", {\n    style: blockStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, translationComponent));\n};\n\nCell.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nvar areEqual = function areEqual(prevProps, nextProps) {\n  var keys = ['value'];\n  var checks = keys.map(function (key) {\n    return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);\n  });\n  var equal = !checks.includes(false); // console.log('BlockEditable', keys, checks, equal);\n\n  return equal;\n};\n\nexport default React.memo(Cell, areEqual);","map":{"version":3,"sources":["/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/Cell.js"],"names":["React","PropTypes","BlockEditable","style","padding","inputFilters","outputFilters","blockStyle","display","width","Cell","classes","value","tableMeta","columnIndex","rowIndex","preview","split","original","translation","onEdit","markdown","originalComponent","translationComponent","propTypes","object","isRequired","areEqual","prevProps","nextProps","keys","checks","map","key","JSON","stringify","equal","includes","memo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,IAAMC,KAAK,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAd;AACA,IAAMC,YAAY,GAAG,CAAC,CAAC,QAAD,EAAW,IAAX,CAAD,CAArB;AACA,IAAMC,aAAa,GAAG,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,CAAtB;AACA,IAAMC,UAAU,GAAG;AAACC,EAAAA,OAAO,EAAE,cAAV;AAA0BC,EAAAA,KAAK,EAAE;AAAjC,CAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OASP;AAAA,MARJC,OAQI,QARJA,OAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,4BALJA,SAKI;AAAA,MAJFC,WAIE,kBAJFA,WAIE;AAAA,MAHFC,QAGE,kBAHFA,QAGE;AAAA,MADJC,OACI,QADJA,OACI;;AAAA,qBAC4BJ,KAAK,CAACK,KAAN,CAAY,IAAZ,CAD5B;AAAA;AAAA,MACGC,QADH;AAAA,MACaC,WADb;;AAEJ,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,QAAD,EAAc;AAC3B,aAD2B,CAE3B;AACD,GAHD;;AAKA,MAAMC,iBAAiB,GACrB,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEnB,KADT;AAEE,IAAA,GAAG,EAAE,CAACa,OAFR;AAGE,IAAA,QAAQ,EAAEE,QAHZ;AAIE,IAAA,QAAQ,EAAE,KAJZ;AAKE,IAAA,YAAY,EAAEb,YALhB;AAME,IAAA,aAAa,EAAEC,aANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUA,MAAMiB,oBAAoB,GACxB,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEpB,KADT;AAEE,IAAA,GAAG,EAAE,CAACa,OAFR;AAGE,IAAA,QAAQ,EAAEG,WAHZ;AAIE,IAAA,QAAQ,EAAE,IAJZ;AAKE,IAAA,YAAY,EAAEd,YALhB;AAME,IAAA,aAAa,EAAEC,aANjB;AAOE,IAAA,MAAM,EAAEc,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYA,SACE,0CACE;AAAK,IAAA,KAAK,EAAEb,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGe,iBADH,CADF,EAIE;AAAK,IAAA,KAAK,EAAEf,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGgB,oBADH,CAJF,CADF;AAUD,CAhDD;;AAkDAb,IAAI,CAACc,SAAL,GAAiB;AACfb,EAAAA,OAAO,EAAEV,SAAS,CAACwB,MAAV,CAAiBC;AADX,CAAjB;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AACzC,MAAMC,IAAI,GAAG,CAAC,OAAD,CAAb;AACA,MAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAS,UAAAC,GAAG;AAAA,WAAKC,IAAI,CAACC,SAAL,CAAeP,SAAS,CAACK,GAAD,CAAxB,MAAmCC,IAAI,CAACC,SAAL,CAAeN,SAAS,CAACI,GAAD,CAAxB,CAAxC;AAAA,GAAZ,CAAf;AACA,MAAMG,KAAK,GAAG,CAACL,MAAM,CAACM,QAAP,CAAgB,KAAhB,CAAf,CAHyC,CAIzC;;AACA,SAAOD,KAAP;AACD,CAND;;AAQA,eAAepC,KAAK,CAACsC,IAAN,CAAW5B,IAAX,EAAiBiB,QAAjB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { BlockEditable } from 'markdown-translatable';\n\nconst style = { padding: '0px' };\nconst inputFilters = [[/<br>/gi, '\\n']];\nconst outputFilters = [[/\\n/gi, '<br>']];\nconst blockStyle = {display: 'inline-block', width: '50%'};\n\nconst Cell = ({\n  classes,\n  value,\n  tableMeta,\n  tableMeta: {\n    columnIndex,\n    rowIndex,\n  },\n  preview,\n}) => {\n  const [original, translation] = value.split('\\t');\n  const onEdit = (markdown) => {\n    debugger\n    // editCell({rowIndex, columnIndex, value: markdown});\n  };\n\n  const originalComponent = (\n    <BlockEditable\n      style={style}\n      raw={!preview}\n      markdown={original}\n      editable={false}\n      inputFilters={inputFilters}\n      outputFilters={outputFilters}\n    />\n  );\n  const translationComponent = (\n    <BlockEditable\n      style={style}\n      raw={!preview}\n      markdown={translation}\n      editable={true}\n      inputFilters={inputFilters}\n      outputFilters={outputFilters}\n      onEdit={onEdit}\n    />\n  );\n\n  return (\n    <>\n      <div style={blockStyle}>\n        {originalComponent}\n      </div>\n      <div style={blockStyle}>\n        {translationComponent}\n      </div>\n    </>\n  );\n};\n\nCell.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  const keys = ['value'];\n  const checks = keys.map(key => (JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key])));\n  const equal = !checks.includes(false);\n  // console.log('BlockEditable', keys, checks, equal);\n  return equal;\n};\n\nexport default React.memo(Cell, areEqual);\n"]},"metadata":{},"sourceType":"module"}