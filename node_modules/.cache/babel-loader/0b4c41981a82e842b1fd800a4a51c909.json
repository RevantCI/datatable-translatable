{"ast":null,"code":"import _slicedToArray from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/Cell.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { BlockEditable } from 'markdown-translatable';\nvar inputFilters = [[/<br>/gi, '\\n']];\nvar outputFilters = [[/\\n/gi, '<br>']];\n\nvar Cell = function Cell(_ref) {\n  var classes = _ref.classes,\n      value = _ref.value,\n      tableMeta = _ref.tableMeta,\n      _ref$tableMeta = _ref.tableMeta,\n      columnIndex = _ref$tableMeta.columnIndex,\n      rowIndex = _ref$tableMeta.rowIndex,\n      rowData = _ref$tableMeta.rowData,\n      rowHeader = _ref.rowHeader,\n      preview = _ref.preview;\n\n  var _value$split = value.split('\\t'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      original = _value$split2[0],\n      translation = _value$split2[1];\n\n  var component;\n\n  var onEdit = function onEdit(markdown) {\n    debugger; // editCell({rowIndex, columnIndex, value: markdown});\n  };\n\n  if (value === 'rowHeader' && rowHeader) {\n    component = rowHeader(rowData);\n  } else {\n    var markdown = original || \"*\".concat(tableMeta.columnData.name, \"*\");\n    var originalComponent = React.createElement(BlockEditable, {\n      raw: !preview,\n      markdown: markdown,\n      editable: false,\n      inputFilters: inputFilters,\n      outputFilters: outputFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n    var translationComponent = React.createElement(BlockEditable, {\n      raw: !preview,\n      markdown: translation,\n      editable: true,\n      inputFilters: inputFilters,\n      outputFilters: outputFilters,\n      onEdit: onEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n    component = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.original,\n      style: blockStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, originalComponent), React.createElement(\"div\", {\n      className: classes.translation,\n      style: blockStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, translationComponent));\n  }\n\n  return component;\n};\n\nCell.propTypes = {// classes: PropTypes.object.isRequired,\n};\nvar blockStyle = {};\n\nvar styles = function styles(theme) {\n  return {\n    root: {},\n    original: {\n      background: '#eee4',\n      display: 'inline-block',\n      width: '50%'\n    },\n    translation: {\n      display: 'inline-block',\n      width: '50%'\n    }\n  };\n};\n\nvar StyleComponent = withStyles(styles)(Cell);\nexport default StyleComponent;","map":{"version":3,"sources":["/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/Cell.js"],"names":["React","PropTypes","withStyles","BlockEditable","inputFilters","outputFilters","Cell","classes","value","tableMeta","columnIndex","rowIndex","rowData","rowHeader","preview","split","original","translation","component","onEdit","markdown","columnData","name","originalComponent","translationComponent","blockStyle","propTypes","styles","theme","root","background","display","width","StyleComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { BlockEditable } from 'markdown-translatable';\n\nconst inputFilters = [[/<br>/gi, '\\n']];\nconst outputFilters = [[/\\n/gi, '<br>']];\n\nconst Cell = ({\n  classes,\n  value,\n  tableMeta,\n  tableMeta: {\n    columnIndex,\n    rowIndex,\n    rowData,\n  },\n  rowHeader,\n  preview,\n}) => {\n  const [original, translation] = value.split('\\t');\n  let component;\n\n  const onEdit = (markdown) => {\n    debugger\n    // editCell({rowIndex, columnIndex, value: markdown});\n  };\n\n  if (value === 'rowHeader' && rowHeader) {\n    component = rowHeader(rowData);\n  } else {\n    let markdown = original || `*${tableMeta.columnData.name}*`;\n    const originalComponent = (\n      <BlockEditable\n        raw={!preview}\n        markdown={markdown}\n        editable={false}\n        inputFilters={inputFilters}\n        outputFilters={outputFilters}\n      />\n    );\n    const translationComponent = (\n      <BlockEditable\n        raw={!preview}\n        markdown={translation}\n        editable={true}\n        inputFilters={inputFilters}\n        outputFilters={outputFilters}\n        onEdit={onEdit}\n      />\n    );\n    component = (\n      <>\n        <div className={classes.original} style={blockStyle}>\n          {originalComponent}\n        </div>\n        <div className={classes.translation} style={blockStyle}>\n          {translationComponent}\n        </div>\n      </>\n    );\n  }\n\n  return component;\n};\n\nCell.propTypes = {\n  // classes: PropTypes.object.isRequired,\n};\n\nconst blockStyle = {};\n\nconst styles = theme => ({\n  root: {\n  },\n  original: {\n    background: '#eee4',\n    display: 'inline-block',\n    width: '50%'\n  },\n  translation: {\n    display: 'inline-block',\n    width: '50%'\n  },\n});\n\nconst StyleComponent = withStyles(styles)(Cell);\nexport default StyleComponent;\n"]},"metadata":{},"sourceType":"module"}