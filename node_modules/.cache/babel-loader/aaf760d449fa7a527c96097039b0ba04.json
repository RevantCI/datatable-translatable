{"ast":null,"code":"import _slicedToArray from \"/Volumes/GithubWorkspace/datatable-translatable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/Cell.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { BlockEditable } from 'markdown-translatable';\nvar style = {\n  padding: '0px'\n};\nvar inputFilters = [[/<br>/gi, '\\n']];\nvar outputFilters = [[/\\n/gi, '<br>']];\nvar blockStyle = {\n  display: 'inline-block',\n  width: '50%'\n};\n\nvar Cell = function Cell(_ref) {\n  var value = _ref.value,\n      tableMeta = _ref.tableMeta,\n      _ref$tableMeta = _ref.tableMeta,\n      columnIndex = _ref$tableMeta.columnIndex,\n      rowIndex = _ref$tableMeta.rowIndex,\n      rowData = _ref$tableMeta.rowData,\n      preview = _ref.preview;\n\n  var _value$split = value.split('\\t'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      original = _value$split2[0],\n      translation = _value$split2[1];\n\n  var component;\n\n  var onEdit = function onEdit(markdown) {\n    debugger; // editCell({rowIndex, columnIndex, value: markdown});\n  };\n\n  if (value === 'rowHeader' && rowHeader) {\n    component = rowHeader(rowData);\n  } else {\n    var originalComponent = React.createElement(BlockEditable, {\n      style: style,\n      raw: !preview,\n      markdown: original,\n      editable: false,\n      inputFilters: inputFilters,\n      outputFilters: outputFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n    var translationComponent = React.createElement(BlockEditable, {\n      style: style,\n      raw: !preview,\n      markdown: translation,\n      editable: true,\n      inputFilters: inputFilters,\n      outputFilters: outputFilters,\n      onEdit: onEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n    component = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: blockStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, originalComponent), React.createElement(\"div\", {\n      style: blockStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, translationComponent));\n  }\n\n  return component;\n};\n\nCell.propTypes = {// classes: PropTypes.object.isRequired,\n};\nexport default Cell;","map":{"version":3,"sources":["/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/Cell.js"],"names":["React","PropTypes","BlockEditable","style","padding","inputFilters","outputFilters","blockStyle","display","width","Cell","value","tableMeta","columnIndex","rowIndex","rowData","preview","split","original","translation","component","onEdit","markdown","rowHeader","originalComponent","translationComponent","propTypes"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,IAAMC,KAAK,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAd;AACA,IAAMC,YAAY,GAAG,CAAC,CAAC,QAAD,EAAW,IAAX,CAAD,CAArB;AACA,IAAMC,aAAa,GAAG,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,CAAtB;AACA,IAAMC,UAAU,GAAG;AAACC,EAAAA,OAAO,EAAE,cAAV;AAA0BC,EAAAA,KAAK,EAAE;AAAjC,CAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAUP;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,4BANJA,SAMI;AAAA,MALFC,WAKE,kBALFA,WAKE;AAAA,MAJFC,QAIE,kBAJFA,QAIE;AAAA,MAHFC,OAGE,kBAHFA,OAGE;AAAA,MADJC,OACI,QADJA,OACI;;AAAA,qBAC4BL,KAAK,CAACM,KAAN,CAAY,IAAZ,CAD5B;AAAA;AAAA,MACGC,QADH;AAAA,MACaC,WADb;;AAEJ,MAAIC,SAAJ;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,QAAD,EAAc;AAC3B,aAD2B,CAE3B;AACD,GAHD;;AAKA,MAAIX,KAAK,KAAK,WAAV,IAAyBY,SAA7B,EAAwC;AACtCH,IAAAA,SAAS,GAAGG,SAAS,CAACR,OAAD,CAArB;AACD,GAFD,MAEO;AACL,QAAMS,iBAAiB,GACrB,oBAAC,aAAD;AACE,MAAA,KAAK,EAAErB,KADT;AAEE,MAAA,GAAG,EAAE,CAACa,OAFR;AAGE,MAAA,QAAQ,EAAEE,QAHZ;AAIE,MAAA,QAAQ,EAAE,KAJZ;AAKE,MAAA,YAAY,EAAEb,YALhB;AAME,MAAA,aAAa,EAAEC,aANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUA,QAAMmB,oBAAoB,GACxB,oBAAC,aAAD;AACE,MAAA,KAAK,EAAEtB,KADT;AAEE,MAAA,GAAG,EAAE,CAACa,OAFR;AAGE,MAAA,QAAQ,EAAEG,WAHZ;AAIE,MAAA,QAAQ,EAAE,IAJZ;AAKE,MAAA,YAAY,EAAEd,YALhB;AAME,MAAA,aAAa,EAAEC,aANjB;AAOE,MAAA,MAAM,EAAEe,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWAD,IAAAA,SAAS,GACP,0CACE;AAAK,MAAA,KAAK,EAAEb,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGiB,iBADH,CADF,EAIE;AAAK,MAAA,KAAK,EAAEjB,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkB,oBADH,CAJF,CADF;AAUD;;AAED,SAAOL,SAAP;AAED,CAzDD;;AA2DAV,IAAI,CAACgB,SAAL,GAAiB,CACf;AADe,CAAjB;AAIA,eAAehB,IAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { BlockEditable } from 'markdown-translatable';\n\nconst style = { padding: '0px' };\nconst inputFilters = [[/<br>/gi, '\\n']];\nconst outputFilters = [[/\\n/gi, '<br>']];\nconst blockStyle = {display: 'inline-block', width: '50%'};\n\nconst Cell = ({\n  // classes,\n  value,\n  tableMeta,\n  tableMeta: {\n    columnIndex,\n    rowIndex,\n    rowData,\n  },\n  preview,\n}) => {\n  const [original, translation] = value.split('\\t');\n  let component;\n\n  const onEdit = (markdown) => {\n    debugger\n    // editCell({rowIndex, columnIndex, value: markdown});\n  };\n\n  if (value === 'rowHeader' && rowHeader) {\n    component = rowHeader(rowData);\n  } else {\n    const originalComponent = (\n      <BlockEditable\n        style={style}\n        raw={!preview}\n        markdown={original}\n        editable={false}\n        inputFilters={inputFilters}\n        outputFilters={outputFilters}\n      />\n    );\n    const translationComponent = (\n      <BlockEditable\n        style={style}\n        raw={!preview}\n        markdown={translation}\n        editable={true}\n        inputFilters={inputFilters}\n        outputFilters={outputFilters}\n        onEdit={onEdit}\n      />\n    );\n    component = (\n      <>\n        <div style={blockStyle}>\n          {originalComponent}\n        </div>\n        <div style={blockStyle}>\n          {translationComponent}\n        </div>\n      </>\n    );\n  }\n\n  return component;\n\n};\n\nCell.propTypes = {\n  // classes: PropTypes.object.isRequired,\n};\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}