{"ast":null,"code":"var highlightRegExp = /highlight-(?:text|source)-([a-z0-9]+)/;\n\nfunction highlightedCodeBlock(turndownService) {\n  turndownService.addRule('highlightedCodeBlock', {\n    filter: function filter(node) {\n      var firstChild = node.firstChild;\n      return node.nodeName === 'DIV' && highlightRegExp.test(node.className) && firstChild && firstChild.nodeName === 'PRE';\n    },\n    replacement: function replacement(content, node, options) {\n      var className = node.className || '';\n      var language = (className.match(highlightRegExp) || [null, ''])[1];\n      return '\\n\\n' + options.fence + language + '\\n' + node.firstChild.textContent + '\\n' + options.fence + '\\n\\n';\n    }\n  });\n}\n\nfunction strikethrough(turndownService) {\n  turndownService.addRule('strikethrough', {\n    filter: ['del', 's', 'strike'],\n    replacement: function replacement(content) {\n      return '~' + content + '~';\n    }\n  });\n}\n\nvar indexOf = Array.prototype.indexOf;\nvar every = Array.prototype.every;\nvar rules = {};\nrules.tableCell = {\n  filter: ['th', 'td'],\n  replacement: function replacement(content, node) {\n    return cell(content, node);\n  }\n};\nrules.tableRow = {\n  filter: 'tr',\n  replacement: function replacement(content, node) {\n    var borderCells = '';\n    var alignMap = {\n      left: ':--',\n      right: '--:',\n      center: ':-:'\n    };\n\n    if (isHeadingRow(node)) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        var border = '---';\n        var align = (node.childNodes[i].getAttribute('align') || '').toLowerCase();\n        if (align) border = alignMap[align] || border;\n        borderCells += cell(border, node.childNodes[i]);\n      }\n    }\n\n    return '\\n' + content + (borderCells ? '\\n' + borderCells : '');\n  }\n};\nrules.table = {\n  // Only convert tables with a heading row.\n  // Tables with no heading row are kept using `keep` (see below).\n  filter: function filter(node) {\n    return node.nodeName === 'TABLE' && isHeadingRow(node.rows[0]);\n  },\n  replacement: function replacement(content) {\n    // Ensure there are no blank lines\n    content = content.replace('\\n\\n', '\\n');\n    return '\\n\\n' + content + '\\n\\n';\n  }\n};\nrules.tableSection = {\n  filter: ['thead', 'tbody', 'tfoot'],\n  replacement: function replacement(content) {\n    return content;\n  }\n}; // A tr is a heading row if:\n// - the parent is a THEAD\n// - or if its the first child of the TABLE or the first TBODY (possibly\n//   following a blank THEAD)\n// - and every cell is a TH\n\nfunction isHeadingRow(tr) {\n  var parentNode = tr.parentNode;\n  return parentNode.nodeName === 'THEAD' || parentNode.firstChild === tr && (parentNode.nodeName === 'TABLE' || isFirstTbody(parentNode)) && every.call(tr.childNodes, function (n) {\n    return n.nodeName === 'TH';\n  });\n}\n\nfunction isFirstTbody(element) {\n  var previousSibling = element.previousSibling;\n  return element.nodeName === 'TBODY' && (!previousSibling || previousSibling.nodeName === 'THEAD' && /^\\s*$/i.test(previousSibling.textContent));\n}\n\nfunction cell(content, node) {\n  var index = indexOf.call(node.parentNode.childNodes, node);\n  var prefix = ' ';\n  if (index === 0) prefix = '| ';\n  return prefix + content + ' |';\n}\n\nfunction tables(turndownService) {\n  turndownService.keep(function (node) {\n    return node.nodeName === 'TABLE' && !isHeadingRow(node.rows[0]);\n  });\n\n  for (var key in rules) {\n    turndownService.addRule(key, rules[key]);\n  }\n}\n\nfunction taskListItems(turndownService) {\n  turndownService.addRule('taskListItems', {\n    filter: function filter(node) {\n      return node.type === 'checkbox' && node.parentNode.nodeName === 'LI';\n    },\n    replacement: function replacement(content, node) {\n      return (node.checked ? '[x]' : '[ ]') + ' ';\n    }\n  });\n}\n\nfunction gfm(turndownService) {\n  turndownService.use([highlightedCodeBlock, strikethrough, tables, taskListItems]);\n}\n\nexport { gfm, highlightedCodeBlock, strikethrough, tables, taskListItems };","map":null,"metadata":{},"sourceType":"module"}