{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styles = require(\"@material-ui/core/styles\");\n\nvar _core = require(\"@material-ui/core\");\n\nvar _blockEditable = _interopRequireDefault(require(\"../block-editable\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // const whyDidYouRender = (process.env.NODE_ENV !== 'production') ?\n//   require('@welldone-software/why-did-you-render') : undefined;\n// if (whyDidYouRender) whyDidYouRender(React);\n\n/**\n * ### A reusable component for translating Markdown as HTML.\n * @component\n */\n\n\nfunction BlockTranslatable(_ref) {\n  var classes = _ref.classes,\n      original = _ref.original,\n      translation = _ref.translation,\n      onTranslation = _ref.onTranslation,\n      inputFilters = _ref.inputFilters,\n      outputFilters = _ref.outputFilters,\n      style = _ref.style,\n      raw = _ref.raw;\n  return _react[\"default\"].createElement(_core.Grid, {\n    container: true,\n    wrap: \"nowrap\",\n    spacing: 0,\n    className: classes.root,\n    style: style\n  }, _react[\"default\"].createElement(_core.Grid, {\n    item: true,\n    xs: 12,\n    className: classes.original\n  }, _react[\"default\"].createElement(_blockEditable[\"default\"], {\n    markdown: original,\n    inputFilters: inputFilters,\n    outputFilters: outputFilters,\n    raw: raw,\n    editable: false\n  })), _react[\"default\"].createElement(_core.Grid, {\n    item: true,\n    xs: 12,\n    className: classes.translation\n  }, _react[\"default\"].createElement(_blockEditable[\"default\"], {\n    markdown: translation,\n    inputFilters: inputFilters,\n    outputFilters: outputFilters,\n    onEdit: onTranslation,\n    raw: raw\n  })));\n}\n\n;\nBlockTranslatable.propTypes = {\n  /** Original markdown for the editor. */\n  original: _propTypes[\"default\"].string.isRequired,\n\n  /** Translation markdown for the editor. */\n  translation: _propTypes[\"default\"].string.isRequired,\n\n  /** Function to propogate changes to the translation. */\n  onTranslation: _propTypes[\"default\"].func.isRequired,\n\n  /** Replace strings before rendering. */\n  inputFilters: _propTypes[\"default\"].array,\n\n  /** Replace strings after editing. */\n  outputFilters: _propTypes[\"default\"].array,\n\n  /** CSS for the component. */\n  style: _propTypes[\"default\"].object,\n\n  /** Display Raw Markdown or HTML. */\n  raw: _propTypes[\"default\"].bool\n};\nBlockTranslatable.defaultProps = {\n  original: '',\n  translation: '',\n  onTranslation: function onTranslation() {},\n  inputFilters: [],\n  outputFilters: [],\n  style: {},\n  raw: false\n};\n\nvar styles = function styles(theme) {\n  return {\n    root: {},\n    original: {\n      background: '#eee4'\n    },\n    translation: {}\n  };\n};\n\nvar areEqual = function areEqual(prevProps, nextProps) {\n  var keys = ['original', 'translation', 'raw', 'style'];\n  var checks = keys.map(function (key) {\n    return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);\n  });\n  var equal = !checks.includes(false); // console.log('BlockTranslatable', keys, checks, equal);\n\n  return equal;\n}; // BlockTranslatable.whyDidYouRender = true;\n\n\nvar StyleComponent = (0, _styles.withStyles)(styles)(BlockTranslatable);\n\nvar MemoComponent = _react[\"default\"].memo(StyleComponent, areEqual);\n\nvar _default = MemoComponent;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}