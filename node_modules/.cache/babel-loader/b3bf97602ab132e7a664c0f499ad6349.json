{"ast":null,"code":"export var parseDataTables = function parseDataTables(_ref) {\n  var original = _ref.original,\n      translation = _ref.translation,\n      rowDelimiter = _ref.rowDelimiter,\n      cellDelimiter = _ref.cellDelimiter;\n  var data = [];\n  var originalDataTable = parseDataTable({\n    table: original,\n    rowDelimiter: rowDelimiter,\n    cellDelimiter: cellDelimiter\n  });\n  var translationDataTable = parseDataTable({\n    table: translation,\n    rowDelimiter: rowDelimiter,\n    cellDelimiter: cellDelimiter\n  });\n\n  if (originalDataTable.columns.length === translationDataTable.columns.length) {\n    if (originalDataTable.rows.length === translationDataTable.rows.length) {\n      data = originalDataTable.rows.map(function (originalRow, rowIndex) {\n        return originalRow.map(function (originalCell, cellIndex) {\n          return {\n            original: originalCell,\n            translation: translationDataTable.data[rowIndex][cellIndex]\n          };\n        });\n      });\n    }\n  }\n};\nexport var parseDataTable = function parseDataTable(_ref2) {\n  var table = _ref2.table,\n      rowDelimiter = _ref2.rowDelimiter,\n      cellDelimiter = _ref2.cellDelimiter;\n  var rows = parseRows({\n    table: table,\n    delimiter: rowDelimiter\n  }).map(function (row) {\n    return parseCells({\n      row: row,\n      delimiter: cellDelimiter\n    });\n  });\n  var dataTable = {\n    columnNames: getColumnNames(rows),\n    data: getData(rows)\n  };\n  return dataTable;\n};\nexport var getColumnNames = function getColumnNames(rows) {\n  return rows[0];\n};\nexport var getData = function getData(rows) {\n  return rows.slice(1);\n};\nexport var parseRows = function parseRows(_ref3) {\n  var table = _ref3.table,\n      delimiter = _ref3.delimiter;\n  return table.split(delimiter);\n};\nexport var parseCells = function parseCells(_ref4) {\n  var row = _ref4.row,\n      delimiter = _ref4.delimiter;\n  return row.split(delimiter);\n};","map":{"version":3,"sources":["/Volumes/GithubWorkspace/datatable-translatable/src/components/datatable/helpers.js"],"names":["parseDataTables","original","translation","rowDelimiter","cellDelimiter","data","originalDataTable","parseDataTable","table","translationDataTable","columns","length","rows","map","originalRow","rowIndex","originalCell","cellIndex","parseRows","delimiter","row","parseCells","dataTable","columnNames","getColumnNames","getData","slice","split"],"mappings":"AAEA,OAAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAA0D;AAAA,MAAxDC,QAAwD,QAAxDA,QAAwD;AAAA,MAA9CC,WAA8C,QAA9CA,WAA8C;AAAA,MAAjCC,YAAiC,QAAjCA,YAAiC;AAAA,MAAnBC,aAAmB,QAAnBA,aAAmB;AACvF,MAAIC,IAAI,GAAG,EAAX;AACA,MAAMC,iBAAiB,GAAGC,cAAc,CAAC;AAACC,IAAAA,KAAK,EAAEP,QAAR;AAAkBE,IAAAA,YAAY,EAAZA,YAAlB;AAAgCC,IAAAA,aAAa,EAAbA;AAAhC,GAAD,CAAxC;AACA,MAAMK,oBAAoB,GAAGF,cAAc,CAAC;AAACC,IAAAA,KAAK,EAAEN,WAAR;AAAqBC,IAAAA,YAAY,EAAZA,YAArB;AAAmCC,IAAAA,aAAa,EAAbA;AAAnC,GAAD,CAA3C;;AACA,MAAIE,iBAAiB,CAACI,OAAlB,CAA0BC,MAA1B,KAAqCF,oBAAoB,CAACC,OAArB,CAA6BC,MAAtE,EAA8E;AAC5E,QAAIL,iBAAiB,CAACM,IAAlB,CAAuBD,MAAvB,KAAkCF,oBAAoB,CAACG,IAArB,CAA0BD,MAAhE,EAAwE;AACtEN,MAAAA,IAAI,GAAGC,iBAAiB,CAACM,IAAlB,CAAuBC,GAAvB,CAA2B,UAACC,WAAD,EAAcC,QAAd,EAA2B;AAC3D,eAAOD,WAAW,CAACD,GAAZ,CAAgB,UAACG,YAAD,EAAeC,SAAf,EAA6B;AAClD,iBAAO;AACLhB,YAAAA,QAAQ,EAAEe,YADL;AAELd,YAAAA,WAAW,EAAEO,oBAAoB,CAACJ,IAArB,CAA0BU,QAA1B,EAAoCE,SAApC;AAFR,WAAP;AAID,SALM,CAAP;AAMD,OAPM,CAAP;AAQD;AACF;AACF,CAhBM;AAkBP,OAAO,IAAMV,cAAc,GAAG,SAAjBA,cAAiB,QAA0C;AAAA,MAAxCC,KAAwC,SAAxCA,KAAwC;AAAA,MAAjCL,YAAiC,SAAjCA,YAAiC;AAAA,MAAnBC,aAAmB,SAAnBA,aAAmB;AACtE,MAAMQ,IAAI,GAAGM,SAAS,CAAC;AAACV,IAAAA,KAAK,EAALA,KAAD;AAAQW,IAAAA,SAAS,EAAEhB;AAAnB,GAAD,CAAT,CACZU,GADY,CACR,UAAAO,GAAG;AAAA,WACNC,UAAU,CAAC;AAACD,MAAAA,GAAG,EAAHA,GAAD;AAAMD,MAAAA,SAAS,EAAEf;AAAjB,KAAD,CADJ;AAAA,GADK,CAAb;AAIA,MAAMkB,SAAS,GAAG;AAChBC,IAAAA,WAAW,EAAEC,cAAc,CAACZ,IAAD,CADX;AAEhBP,IAAAA,IAAI,EAAEoB,OAAO,CAACb,IAAD;AAFG,GAAlB;AAIA,SAAOU,SAAP;AACD,CAVM;AAYP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACZ,IAAD;AAAA,SAAUA,IAAI,CAAC,CAAD,CAAd;AAAA,CAAvB;AACP,OAAO,IAAMa,OAAO,GAAG,SAAVA,OAAU,CAACb,IAAD;AAAA,SAAUA,IAAI,CAACc,KAAL,CAAW,CAAX,CAAV;AAAA,CAAhB;AAEP,OAAO,IAAMR,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAEV,KAAF,SAAEA,KAAF;AAAA,MAASW,SAAT,SAASA,SAAT;AAAA,SAAwBX,KAAK,CAACmB,KAAN,CAAYR,SAAZ,CAAxB;AAAA,CAAlB;AACP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAED,GAAF,SAAEA,GAAF;AAAA,MAAOD,SAAP,SAAOA,SAAP;AAAA,SAAsBC,GAAG,CAACO,KAAJ,CAAUR,SAAV,CAAtB;AAAA,CAAnB","sourcesContent":["\n\nexport const parseDataTables = ({original, translation, rowDelimiter, cellDelimiter}) => {\n  let data = [];\n  const originalDataTable = parseDataTable({table: original, rowDelimiter, cellDelimiter});\n  const translationDataTable = parseDataTable({table: translation, rowDelimiter, cellDelimiter})\n  if (originalDataTable.columns.length === translationDataTable.columns.length) {\n    if (originalDataTable.rows.length === translationDataTable.rows.length) {\n      data = originalDataTable.rows.map((originalRow, rowIndex) => {\n        return originalRow.map((originalCell, cellIndex) => {\n          return {\n            original: originalCell,\n            translation: translationDataTable.data[rowIndex][cellIndex],\n          };\n        });\n      });\n    }\n  }\n}\n\nexport const parseDataTable = ({table, rowDelimiter, cellDelimiter}) => {\n  const rows = parseRows({table, delimiter: rowDelimiter})\n  .map(row =>\n    parseCells({row, delimiter: cellDelimiter})\n  );\n  const dataTable = {\n    columnNames: getColumnNames(rows),\n    data: getData(rows),\n  }\n  return dataTable;\n};\n\nexport const getColumnNames = (rows) => rows[0];\nexport const getData = (rows) => rows.slice(1);\n\nexport const parseRows = ({table, delimiter}) => table.split(delimiter);\nexport const parseCells = ({row, delimiter}) => row.split(delimiter);"]},"metadata":{},"sourceType":"module"}